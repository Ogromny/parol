#!/usr/bin/env ruby
require 'database'
require 'thor'
require 'orpg'

module Parol
    class Command < Thor

        # executed once
        puts 'Database password:'
        Database.password = STDIN.gets.chomp

        desc 'create', 'Create a new account.'
        def create
            app      = ask('1. Input the name of the app/url:')
            login    = ask('2. Input the login you use on this app/url:')
            password = yes?('3. Would you like parol to generate a strong random password for you ? [y/n]')
            password = password ? ORPG::ORPG.generate(16, {number: true, lowercase: true, uppercase: true, special: true}) : ask('3.1. Input the password related to this account:')
            comments = yes?('4. Some notes about this account ? [y/n]')
            comments = comments ? ask('4.1. Some notes:') : ''

            # Resume parol
            say("app: #{app}\nlogin: #{login}\npassword: #{password}\nnotes: #{comments}")

            data = Database.decrypt
            data << { app: app, login: login, password: password, comments: comments }
            Database.encrypt(data)
        end

        desc 'list <index>', 'List a particular index, or everything if index is omitted.'
        def list(index = nil)
            # index given
            if ! index.nil?
                index = Integer(index) rescue abort('please enter a number !')
                information = Database.decrypt[index] || abort('index does not exists !')
                say 'index: ' + index.to_s
                say 'app:   ' + information[:app]
                say 'login: ' + information[:login]
                say 'notes: ' + information[:comments]

            # index is'nt given, so list all
            else
                Database.decrypt.each_with_index do |information, index|
                    say "[#{index}]" + information[:app] + ' -> ' + information[:login]
                end
            end
        end

        desc 'delete <index>', 'Delete a particular index.'
        def delete(index)
            Database.remove(index)
        end

    end
end

Parol::Command.start(ARGV)